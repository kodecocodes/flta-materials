// Mocks generated by Mockito 5.4.2 from annotations
// in recipes/test/data/database/db_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipes/data/database/db_repository.dart' as _i4;
import 'package:recipes/data/database/recipe_db.dart' as _i2;
import 'package:recipes/data/models/models.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRecipeDatabase_0 extends _i1.SmartFake
    implements _i2.RecipeDatabase {
  _FakeRecipeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecipe_1 extends _i1.SmartFake implements _i3.Recipe {
  _FakeRecipe_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DBRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBRepository extends _i1.Mock implements _i4.DBRepository {
  @override
  _i2.RecipeDatabase get recipeDatabase => (super.noSuchMethod(
        Invocation.getter(#recipeDatabase),
        returnValue: _FakeRecipeDatabase_0(
          this,
          Invocation.getter(#recipeDatabase),
        ),
        returnValueForMissingStub: _FakeRecipeDatabase_0(
          this,
          Invocation.getter(#recipeDatabase),
        ),
      ) as _i2.RecipeDatabase);
  @override
  set recipeDatabase(_i2.RecipeDatabase? _recipeDatabase) => super.noSuchMethod(
        Invocation.setter(
          #recipeDatabase,
          _recipeDatabase,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set ingredientStream(_i5.Stream<List<_i3.Ingredient>>? _ingredientStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #ingredientStream,
          _ingredientStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set recipeStream(_i5.Stream<List<_i3.Recipe>>? _recipeStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #recipeStream,
          _recipeStream,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i3.Recipe>> findAllRecipes() => (super.noSuchMethod(
        Invocation.method(
          #findAllRecipes,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Recipe>>.value(<_i3.Recipe>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Recipe>>.value(<_i3.Recipe>[]),
      ) as _i5.Future<List<_i3.Recipe>>);
  @override
  _i5.Stream<List<_i3.Recipe>> watchAllRecipes() => (super.noSuchMethod(
        Invocation.method(
          #watchAllRecipes,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.Recipe>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i3.Recipe>>.empty(),
      ) as _i5.Stream<List<_i3.Recipe>>);
  @override
  _i5.Stream<List<_i3.Ingredient>> watchAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #watchAllIngredients,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.Ingredient>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i3.Ingredient>>.empty(),
      ) as _i5.Stream<List<_i3.Ingredient>>);
  @override
  _i5.Future<_i3.Recipe> findRecipeById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findRecipeById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Recipe>.value(_FakeRecipe_1(
          this,
          Invocation.method(
            #findRecipeById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Recipe>.value(_FakeRecipe_1(
          this,
          Invocation.method(
            #findRecipeById,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Recipe>);
  @override
  _i5.Future<List<_i3.Ingredient>> findAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #findAllIngredients,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Ingredient>>.value(<_i3.Ingredient>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Ingredient>>.value(<_i3.Ingredient>[]),
      ) as _i5.Future<List<_i3.Ingredient>>);
  @override
  _i5.Future<List<_i3.Ingredient>> findRecipeIngredients(int? recipeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #findRecipeIngredients,
          [recipeId],
        ),
        returnValue: _i5.Future<List<_i3.Ingredient>>.value(<_i3.Ingredient>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Ingredient>>.value(<_i3.Ingredient>[]),
      ) as _i5.Future<List<_i3.Ingredient>>);
  @override
  _i5.Future<int> insertRecipe(_i3.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #insertRecipe,
          [recipe],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<List<int>> insertIngredients(List<_i3.Ingredient>? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertIngredients,
          [ingredients],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);
  @override
  _i5.Future<void> deleteRecipe(_i3.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecipe,
          [recipe],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteIngredient(_i3.Ingredient? ingredient) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteIngredient,
          [ingredient],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteIngredients(List<_i3.Ingredient>? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteIngredients,
          [ingredients],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteRecipeIngredients(int? recipeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRecipeIngredients,
          [recipeId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<dynamic> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
